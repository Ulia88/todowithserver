{"version":3,"sources":["Form.js","Edit.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","newTask","setNewTasks","add","addTask","value","onChange","e","target","onClick","Edit","el","deleteTask","markDone","editItem","makeLineTrough","index","moveUp","isElementLast","name","editName","setEditName","switchEdit","setSwitchEdit","style","done","type","checked","_id","disabled","List","task","map","length","key","App","setTasks","todoId","a","axios","delete","then","response","catch","error","console","log","get","listFromServer","data","newName","post","newTitle","patch","todo","put","useEffect","currentElement","previousElement","up","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5b870ef9.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction Form(props) {\n\nconst [newTask, setNewTasks] = useState('')\nconst add = props.addTask\n\nconst cleanInput = () => {\n    add(newTask)\n    setNewTasks('')\n}\n\n\n    return (\n\n        <div>\n            FORM\n\n            <input value={newTask} onChange={(e) => setNewTasks(e.target.value)}/>\n            <button onClick={cleanInput}>ADD TASK ‚¨áÔ∏è</button>\n        </div>\n\n\n    )\n}\n\n\nexport default Form;\n","import React, {useState} from 'react';\n\n\nfunction Edit(props) {\n\n    const {el, markDone, deleteTask, editItem, makeLineTrough, index, moveUp, isElementLast} = props;\n    const [editName, setEditName] = useState(el.name)\n    const [switchEdit, setSwitchEdit] = useState(false)\n\n    const style = el.done === true ? {\"textDecoration\": \"line-through\"} : null\n\n    const editButtonHandler = () => {\n        editItem(editName, el._id)\n        setSwitchEdit(false)\n        setEditName('')\n    }\n\n    const saveButtonHandler = () => {\n        setSwitchEdit(!switchEdit);\n    }\n\n\n    return (\n        <div>\n            <li style={style}>\n                <input type=\"checkbox\" checked={el.done} onChange={() => makeLineTrough(el)}/>\n                {switchEdit ? (\n                    <>\n                        <input value={editName} onChange={(e) => setEditName(e.target.value)}/>\n                        <button onClick={editButtonHandler}>Save</button>\n                    </>\n\n                ) : (\n                    <>\n                        {/*{el.done && 'üìå'}*/}\n                        {el.name}\n\n                        {/*<button onClick={() => markDone({*/}\n                        {/*    _id: el._id,*/}\n                        {/*    done: !el.done*/}\n                        {/*})}>{el.done ? 'Unmark' : \"Mark\"} ‚úçÔ∏è*/}\n                        {/*</button>*/}\n\n                        <button onClick={() => deleteTask(el._id)}>Delete üóëÔ∏è</button>\n                        <button onClick={() => moveUp(index, index - 1)} disabled={!index}>Up‚¨ÜÔ∏è</button>\n                        <button onClick={() => moveUp(index, index + 1)} disabled={isElementLast}>Down‚¨áÔ∏è</button>\n                    </>\n                )\n                }\n\n                <button onClick={saveButtonHandler}>Edit</button>\n\n\n            </li>\n\n\n        </div>\n    );\n}\n\nexport default Edit;\n","import React from 'react';\nimport Edit from './Edit'\n\nfunction List(props) {\n\n    const {task, markDone, deleteTask, editItem, makeLineTrough, moveUp} = props;\n\n\n    return (\n        <div>\n            LIST\n            {task.map((el, index) => {\n                const isElementLast = index === task.length - 1\n                return < Edit\n                    key={index}\n                    el={el}\n                    markDone={markDone}\n                    deleteTask={deleteTask}\n                    editItem={editItem}\n                    makeLineTrough={makeLineTrough}\n                    index={index}\n                    moveUp={moveUp}\n                    isElementLast={isElementLast}\n                />\n\n            })}\n\n        </div>\n    );\n}\n\nexport default List;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport axios from \"axios\";\n\n\nfunction App() {\n\n    const [task, setTasks] = useState([])\n\n    const deleteTask = async (todoId) => {\n        // const delTask = task.filter(el => el._id !== id)\n        // setTasks(delTask)\n       await axios.delete(`http://localhost:5000/todo/${todoId}`)\n            .then(function (response){\n\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response){\n                const listFromServer = response.data\n                console.log(listFromServer);\n                setTasks(listFromServer)\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n\n    }\n\n    const addTask = async (newName) => {\n        // const addNewTask = {id: Math.random(), name: newName, done:false}\n        // const add = [...task, addNewTask]\n        // setTasks(add)\n\n       await axios.post('http://localhost:5000/todo',{name: newName})\n            .then(function (response){\n                // const listFromServer = response.data\n                // console.log(listFromServer);\n                // setTasks(listFromServer)\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n\n\n       await axios.get('http://localhost:5000/todo')\n            .then(function (response){\n                const listFromServer = response.data\n                console.log(listFromServer);\n                setTasks(listFromServer)\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n\n    }\n\n    // const markDone = async (todoId) => {\n    //     const update = task.map(el => {\n    //         if (el._id === id) return {...el, done};\n    //         return el\n    //     })\n    //     setTasks(update)\n    //\n    // }\n\n    const editItem = async (newTitle, todoId) => {\n        // const makeEdit = task.map(el => {\n        //   if (el._id === id) return {...el, name: newName};\n        //   return el\n        // })\n        // setTasks(makeEdit)\n        await axios.patch(`http://localhost:5000/todo/${todoId}`,{name: newTitle})\n            .then(function (response){\n\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n\n\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response){\n                const listFromServer = response.data\n                console.log(listFromServer);\n                setTasks(listFromServer)\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n    }\n\n    const makeLineTrough = async (todo) => {\n        // const line = task.map((el) => {\n        //     if (el._id === id) return {...el, done: !el.done}\n        //     return el\n        // })\n        // setTasks(line)\n        await axios.put(`http://localhost:5000/todo/${todo._id}`,{done: !todo.done})\n            .then(function (response){\n\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n\n\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response){\n                const listFromServer = response.data\n                console.log(listFromServer);\n                setTasks(listFromServer)\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n    }\n\n    const moveUp = (currentElement, previousElement) => {\n        if (previousElement < 0 || previousElement >= task.length) return                           //in case nothing is broken\n        const up = task.map((el, i) => {\n        if (currentElement === i) return task[previousElement];\n        if (previousElement === i) return task[currentElement];\n        return el\n        })\n        setTasks(up)\n    }\n\n    useEffect(() => {\n        axios.get('http://localhost:5000/todo')\n            .then(function (response){\n                const listFromServer = response.data\n                console.log(listFromServer);\n                setTasks(listFromServer)\n            })\n\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n    }, [])\n\n\n    return (\n\n\n        <div>\n\n            <Form addTask={addTask}/>\n            <List task={task}\n                  deleteTask={deleteTask}\n                  // markDone={markDone}\n                  editItem={editItem}\n                  makeLineTrough={makeLineTrough}\n                  moveUp={moveUp}\n            />\n\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}